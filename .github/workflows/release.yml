#################################################################################
#  Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
#  Copyright (c) 2025 Cofinity-X GmbH
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################


---
name: "Release"

on:
  workflow_dispatch:

jobs:
  run-all-tests:
    name: "Run All Tests"
    uses: ./.github/workflows/run-all-tests.yml

  validation:
    name: "Workflow Validation"
    needs: [ run-all-tests ]
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release-version.outputs.release_version }}
      update_main_branch_version: ${{ steps.update-main.outputs.update_main_branch_version }}
        - uses: actions/checkout@v5
        - name: Output release version
          id: release-version
          run: |
            VERSION=$(grep "version" gradle.properties  | awk -F= '{print $2}')
            echo "release_version=$VERSION" >> $GITHUB_OUTPUT
        - name: Output update main branch version
          id: update-main
          run: |
            IFS=.- read -r MAJOR MINOR PATCH SNAPSHOT<<<"${{ steps.release-version.outputs.release_version }}" 
            if [[ $PATCH == '0' && -z $SNAPSHOT ]]; 
            then
              echo "update_main_branch_version=true" >> $GITHUB_OUTPUT
            else 
              echo "update_main_branch_version=false" >> $GITHUB_OUTPUT
            fi
        - name: Validations
          run: |
            if [[ "${{ github.repository }}" != "eclipse-tractusx/bpn-did-resolution-service" ]]; then
              echo "This workflow can only be run on the eclipse-tractusx/bpn-did-resolution-service repository."
              exit 1
            fi
            
            if [[ ! "${{ github.ref_name }}" =~ ^release/ ]]; then
              echo "This workflow can only be run on the branches starting with release/."
              exit 1
            fi
            
            if [[ "${{steps.release-version.outputs.release_version}}" =~ SNAPSHOT ]]; then
              echo "This workflow can not be executed for SNAPSHOT versions."
              exit 1
            fi

  # Release: Maven Artifacts
  maven-release:
    name: Publish extension's release version to maven repository
    needs: [ validation ]
    permissions:
      contents: read
    if: needs.validation.outputs.release_version
    uses: ./.github/workflows/trigger-maven-publish.yaml
    secrets: inherit
    with:
      version: ${{ needs.validation.outputs.release_version }}

  docker-release:
    name: Publish Docker images
    runs-on: ubuntu-latest
    needs: [ validation ]
    permissions:
      contents: write
      packages: write
    if: needs.validation.outputs.release_version

    strategy:
      fail-fast: false
      matrix:
        variant: [
          { dir: runtimes, img: bdrs-server },
          { dir: runtimes, img: bdrs-server-memory },
        ]

    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/publish-docker-image
        name: Publish ${{ matrix.variant.img }}
        with:
          docker_tag: ${{ needs.validation.outputs.release_version }}
          rootDir: ${{ matrix.variant.dir }}/${{ matrix.variant.img }}
          imagename: ${{ matrix.variant.img }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          do_push: 'true'

  # Release: Helm Charts
  helm-release:
    name: Publish new helm release
    needs: [ validation ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write

    if: needs.validation.outputs.release_version
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.8.1
      - name: Package helm, update index.yaml and push to gh-pages
        run: |
          # Prepare git env
          git config user.name "eclipse-tractusx-bot"
          git config user.email "tractusx-bot@eclipse.org"

          # Package all charts
          find charts -name Chart.yaml -not -path "./edc-tests/*" | xargs -n1 dirname | xargs -n1 helm package -u -d helm-charts

          git checkout gh-pages || git checkout -b gh-pages
          git pull --rebase origin gh-pages

          # Generate helm repo index.yaml
          helm repo index . --merge index.yaml --url https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/

          # Commit and push to gh-pages
          git add index.yaml helm-charts
          git commit -s -m "Release ${{ needs.validation.outputs.release_version }}"

          git push origin gh-pages

  # Release: GitHub tag & release; Merges back releases into main; Starts a new development cycle;
  github-release:
    name: Publish new github release
    needs: [ validation, maven-release, docker-release, helm-release ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.validation.outputs.release_version
    steps:
      - uses: actions/checkout@v5
        with:
          # 0 to fetch the full history due to upcoming merge of releases into main branch
          fetch-depth: 0
      - name: Create Release Tag
        id: create_release_tag
        shell: bash
        run: |
          # Prepare git env
          git config user.name "eclipse-tractusx-bot"
          git config user.email "tractusx-bot@eclipse.org"

          # informative
          git branch -a
          git tag

          # Create & push tag
          git tag --force ${{ needs.validation.outputs.release_version }}
          git push --force origin ${{ needs.validation.outputs.release_version }}
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          tag: ${{ needs.validation.outputs.release_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: ${{ needs.validation.outputs.update_main_branch_version == 'true' }}
          removeArtifacts: true

  publish-openapi-to-gh-pages:
    name: "Publish OpenAPI UI spec GitHub Pages"
    permissions:
      contents: write
    needs: [ validation ]
    uses: ./.github/workflows/publish-openapi.yaml
    secrets: inherit

  main-branch-update:
    name: "Bump main branch version"
    runs-on: ubuntu-latest
    needs: [ validation, github-release ]
    if: ${{ needs.validation.outputs.update_main_branch_version == 'true' }}
    permissions:
      contents: write
      packages: write
      pages: write
    steps:
      - name: Checkout main
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: main
      - name: Version and Chart Updates
        uses: ./.github/actions/update-version-and-charts
        with:
          version: ${{ needs.validation.outputs.release_version }}
          bump_version: "true"
      - name: Push main updates
        run: |
          git push origin main
